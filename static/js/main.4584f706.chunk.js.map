{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","input","setInput","todos","setTodos","setStatus","className","type","value","onChange","e","target","onClick","preventDefault","id","Math","random","title","createdAt","Date","toLocaleString","done","alert","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","length","index","key","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","parse","handleFilter","useCallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4584f706.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({ input, setInput, todos, setTodos, setStatus }) => {\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    if (!input) {\n      alert('[ERROR] EMPTY TEXT');\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        id: Math.random() * 1000,\n        title: input,\n        createdAt: new Date().toLocaleString(),\n        done: false,\n      },\n    ]);\n    setInput('');\n  };\n\n  const handlerStatusChange = (e) => setStatus(e.target.value);\n\n  return (\n    <form>\n      <input\n        className='todo-input'\n        type='text'\n        value={input}\n        onChange={handleInputChange}\n      />\n      <button onClick={submit} className='todo-button' type='submit'>\n        <i className='fas fa-plus-square'></i>\n      </button>\n      <div className='select'>\n        <select\n          onChange={handlerStatusChange}\n          name='todos'\n          className='filter-todo'\n        >\n          <option value='all'>All</option>\n          <option value='completed'>Completed</option>\n          <option value='uncompleted'>Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Todo = ({ todo, todos, setTodos }) => {\n  const delTodo = () => {\n    setTodos(todos.filter((el) => el.id !== todo.id));\n  };\n\n  const completedTodo = () => {\n    setTodos(\n      todos.map((item) =>\n        item.id === todo.id ? { ...item, done: !item.done } : item\n      )\n    );\n  };\n\n  return (\n    <div className='todo' title={`Created at: ${todo.createdAt}`}>\n      <li className={`todo-item ${todo.done && 'completed'}`}>{todo.title}</li>\n      <button onClick={completedTodo} className='complete-btn'>\n        <i className='fas fa-check'></i>\n      </button>\n      <button onClick={delTodo} className='trash-btn'>\n        <i className='fas fa-trash'></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nconst TodoList = ({ todos, setTodos, filteredTodos }) => {\n  return (\n    <div className='todo-container'>\n      <ul className='todo-list'>\n        {filteredTodos.length > 0 &&\n          filteredTodos.map((todo, index) => (\n            <Todo key={todo.id} {...{ todo, todos, setTodos }} />\n          ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\n\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  const [input, setInput] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      setTodos(JSON.parse(localStorage.getItem('todos')));\n    }\n  }, []);\n\n  // FILTER FUNCTION\n  const handleFilter = useCallback(() => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter((el) => el.done));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter((el) => !el.done));\n        break;\n      default:\n        setFilteredTodos(todos);\n    }\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [status, todos]);\n\n  useEffect(() => {\n    handleFilter();\n  }, [handleFilter]);\n\n  return (\n    <div className='App'>\n      <header>\n        <h1>Todo App</h1>\n      </header>\n      <Form {...{ input, setInput, todos, setTodos, setStatus }} />\n      <TodoList {...{ todos, setTodos, filteredTodos }} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}